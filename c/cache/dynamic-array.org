#+Title: dynamic array

动态数组最常见的实现方法是用一个一维数组，当数组长度不够时，就把数组长度加倍，同时可能需要把数组内原始的内容拷贝一遍。

这种实现方法比较简单，但是最多可能浪费O(n)的空间。

有一种节省空间的实现方法：Hash Array Tree(HAT). 虽然名字中含有Hash，但HAT和hash一点关系都没有。

HAT的做法是使用二级索引，用多个数组保存元素。所以定位一个元素，需要两步：先选择一个数组，然后再在数组中定位。
要用index访问一个数据项，需要把index按二进制位分成两高位和地位两部分，高位用来选择数组，低位表示数组中的偏移。
#+begin_src cpp
void* get_item(const int64_t index)
{
   return data_[index >> low_mask_bit_][index & low_mask_];
}
#+end_src

按照习惯，一般把高位和地位设置成相同的长度，这样每次扩容需要把容量扩大四倍。但是浪费的空间只有O(sqrt(n))。
当然了，虽然节省空间，这种算法效率更低，实现稍微复杂一些，似乎用的较少。
