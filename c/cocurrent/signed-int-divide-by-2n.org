#+Title: signed int divided by power of 2

一个整数x被2的n次方除所得的结果等价于把x右移若干位，就像下面的代码所展示的一样。
#+begin_example
uint64_t unsigned_divide(uint64_t x)
{
  return x/1024;
}
0000000000400498 <unsigned_divide>:
  400498:       55                      push   %rbp
  400499:       48 89 e5                mov    %rsp,%rbp
  40049c:       48 89 7d f8             mov    %rdi,0xfffffffffffffff8(%rbp)
  4004a0:       48 8b 45 f8             mov    0xfffffffffffffff8(%rbp),%rax
  4004a4:       48 c1 e8 0a             shr    $0xa,%rax
  4004a8:       c9                      leaveq 
  4004a9:       c3                      retq   
#+end_example

编译器很聪明，所以我们没有必要自己去把除法转成移位的操作了。
不光如此，编译器做的比这点更好，它还知道什么时候不能简单的把除法转成移位。就像下面的代码展示的一样。
#+begin_example
int64_t signed_divide(int64_t x)
{
  return x/1024;
}
00000000004004aa <signed_divide>:
  4004aa:       55                      push   %rbp
  4004ab:       48 89 e5                mov    %rsp,%rbp
  4004ae:       48 89 7d f8             mov    %rdi,0xfffffffffffffff8(%rbp)
  4004b2:       48 8b 45 f8             mov    0xfffffffffffffff8(%rbp),%rax
  4004b6:       48 8d 90 ff 03 00 00    lea    0x3ff(%rax),%rdx
  4004bd:       48 85 c0                test   %rax,%rax
  4004c0:       48 0f 48 c2             cmovs  %rdx,%rax
  4004c4:       48 c1 f8 0a             sar    $0xa,%rax
  4004c8:       c9                      leaveq 
  4004c9:       c3                      retq   
#+end_example
为什么呢？ =uint64_t= 的除法可以直接用移位代替， =int64_t= 的除法还需要多几步操作。
原因很简单，因为 =-1/2= 结果为0，但是移位的结果不是 =-1= . 也就是说负数移位的结果是向 =-inf= 方向取整，
但是我们希望它向 =0= 方向取整。所以 =int64_t= 除 =1024= 的做法是:
#+begin_example
if x >=0: return shr(x, 10);
else: return sar(x+1023, 10);
#+end_example
