#+Title: madvise

分配大片内存通常用 =mmap()=, 如果要释放内存，可以用 =munmap()=, 
也可以选择用 =madvise()= 说明某一段内存近期内不会使用。但是 =madvise()= 并不会立即归还内存。
这种行为究竟对程序性能有没有影响不好验证，但是看样子最好不要依赖于 =madvise(MADV_DONTNEED)= 的特性。

通过下面的程序可以验证 =madvise(MADV_DONTNEED)= 并不会立即是否内存:
#+begin_src cpp
int test_madvise_noneed(int64_t len)
{
  int err = 0;
  const char* path = "file.mmap";
  int fd = 0;
  char* buf = NULL;
  assert(0 == set_sigaction(SIGINT, int_handler));
  assert(0 <= (fd = open(path, O_CREAT|O_RDWR, S_IRWXU)));
  assert(fd > 0);
  assert(0 == ftruncate(fd, len));
  printf("test madvise[len=%ld], C-c to mmap()\n", len);
  system("free -m|head -2");
  pause();
  assert(NULL != (buf = mmap(NULL, len, PROT_WRITE|PROT_READ, MAP_PRIVATE, fd, 0)));
  printf("mmap() OK, C-c to memset()\n");
  system("free -m|head -2");
  pause();
  memset(buf, 0, len);
  printf("memset() OK, C-c to madvise()\n");
  system("free -m|head -2");
  pause();
  memset(buf, len, MADV_DONTNEED);
  printf("madvise() OK, C-c to return\n");
  system("free -m|head -2");
  pause();
  return err;
}
#+end_src

程序输出为:
#+begin_example
test madvise[len=1024000000], C-c to mmap()
             total       used       free     shared    buffers     cached
Mem:          7983       6721       1262          0         12       1829
mmap() OK, C-c to memset()
             total       used       free     shared    buffers     cached
Mem:          7983       6721       1261          0         12       1829
memset() OK, C-c to madvise()
             total       used       free     shared    buffers     cached
Mem:          7983       7937         45          0          9       2075
madvise() OK, C-c to return
             total       used       free     shared    buffers     cached
Mem:          7983       7935         47          0          9       2073
#+end_example
