#+Title: CAS vs Atomic Add

通常无锁算法都要用CAS操作实现，部分可以改造成用Atomic Add实现，我们一般会认为这些操作在没有冲突的情况下
是很快的，但实际情况又如何呢?

实际上CAS和原子操作相对于CPU的速度来说，代价还是很大的，因为它们需要一次访存，并且带有一次memory barrier。

实际测试的结果如下，用单线程测试，所以肯定没有冲突，如果是空循环，每秒可以执行9亿次，但是如果执行Atomic Add，
每秒可以执行5.8千万次，如果是CAS操作，每秒执行3.6千万次。
结论是执行空循环大概需要1ns，这大概和CPU的主频一致；
执行Atomic Add和CAS操作大概需要20-30ns, 这大概和访存的时间一致。

如果增加线程数，CAS和Atomic Add操作由于冲突增加，执行时间反而变得更长，增加到两个线程，执行时间增加了一倍多。
