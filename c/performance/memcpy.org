#+Title: memcpy的速度

这里比较了三种memcpy实现的速度(只比较速度，不考虑异常输入):
1. 内置的 =memcpy=
2. 按字节拷贝
3. 每8字节拷贝，用 =int64_t= 的赋值实现
2，3的实现如下:
#+begin_src cpp
// no check
void* memcpy_byte_by_byte(char* dest, const char* src, int64_t size)
{
  for(int64_t i = 0; i < size; i++)
    *dest++ = *src++;
  return dest;
}

void* memcpy_int_by_int(char* dest, const char* src, int64_t size)
{
  int64_t* dest2 = (int64_t*)dest;
  const int64_t* src2 = (const int64_t*)src;
  for(int64_t i = 0; i < size/sizeof(int64_t); i++)
    *dest2++ = *src2++;
  return dest;
}
#+end_src

最后测试的结果如下, 拷贝1G的数据
#+begin_example
memcpy in 519.229000ms
memcpy_byte_by_byte in 1355.910000ms
memcpy_int_by_int in 807.553000ms
#+end_example

标准实现最快，比按字节拷贝快1倍多，比8字节拷贝也更快。标准实现比8字节拷贝更快应该主要是因为标准实现使用了不进cache的写指令。
