#+Title: core

1. 为什么gdb不能在load一个core之后执行函数?
之所以会有这个问题是因为：一般认为core文件记录了进程执行的所有状态，并且gdb确实可以查看进程core掉的那一时刻变量的值。
那么要求调用一个函数也是顺理成章的事。

首先因为调用的函数可能访问任意的数据，所以这个函数必须和core文件mmap之后的数据在同一个地址空间，
因为执行一个函数可能调用子函数，并且可能调用任意多层，所以调用函数必须要有stack。

当然gdb重建内存映射和stack是很容易的事。有两点让问题变得更复杂:
  1. 在调用一个函数的时候，可能又会触发新的signal。
  2. 在函数里可能要访问文件描述符。
这基本上等于说只有在进程活着的时候，才能调用一个函数，没有活着的进程，就不能保证调用函数能正确地执行。
但是接下来的问题是gdb难道不能根据core文件重建进程的所有状态吗？
一旦进程core掉，本质上是没有办法恢复进程状态的，特别是进程依赖的文件描述符，
不仅要打开这些文件描述符，而且文件描述符本身也是有状态的，这些信息由内核维护，并未在core文件中记下来。
即使原则上可行，记录所有状态也是难以实现的目标，因为除了普通文件，还有epool，信号量等。

