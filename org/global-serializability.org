#+Title: Global Serializability

* global serializability
如果一个业务要操作多个独立的数据库，那么为了让程序的执行容易理解，至少需要保证事务的两个性质:
1. 原子性，也即一个事务要么提交，要么回滚，如果提交，所有的数据库都提交，如果回滚，那么所有的数据库都要回滚。
   通常用atomic commitment protocol实现，最有名的就是两阶段提交。
2. 可串行化，因为涉及到多个数据库，所以也称为Global Serializability，也即所有的分布式事务都可以定一个全局的操作顺序。
   通常是指conflict serializable。
这里讨论一下global serializability, 首先最重要的是如果所有参与的数据库都满足Serializability，那么分布式事务并不能保证
自动实现global serializability。道理很简单，因为分布式事务之间的依赖关系，或者说conflict并不能自动的被参与事务的数据库
知道，所以参与分布式事务的数据库便不能正确地解决分布式事务之间的冲突。比如，有两个分布式事务T1, T2, 两个独立的数据库D1, D2
有可能T1, T2操作D2时已经有冲突了，并且D2对冲突的排序是T1 < T2, 但接下来T1，T2要操作D1，并且也有冲突，但是D1并不知道D2是如何
解决T1，T2之间的冲突的，实际上，D1也许根本不知道D2的存在，在这种情况下，D1可以随意安排T1，T2的顺序，比如T1 > T2, 假如是这样，
那么T1，T2从全局来看就不可串行化了。

global serializability在1980-1990年代是数据库研究的热点，当时人们认为这个问题对于数据库系统的可扩展性是非常重要的，同时一致
认为这个问题是难解的。需要说明的正是因为对分布式数据事务实现global serializability比较难，所有有人提出代替它的方案，
包括Quasi serializability和Two-level serializability, 但是看起来没有实际的用途。并且在1991年提出commit ordering之后，学术界
认为global serializability算是可以解决了，所以这些替代方案暂时看来没有关注的必要。当然global serializability虽然在研究领域
被研究得很热, 但是目前在工程实践中似乎用的并不多，这是因为硬件和单机数据库在后来得到了比较大的发展，
包括网络的速度也得到了发展，一般情况并不需要多个数据库。有些业务不可避免的要涉及到多个数据库，但是这时可以由用户自己控制并发
事务的问题。不管如何，用commit ordering来实现global serializability的技术依然是值得学习的。

实现global serializability的问题被认为很困难，主要是因为： 
考虑分布式事务T1,T2, 两个数据库D1, D2； T1，T2在D1,D2上的排序可能是互相矛盾的，可能在D1上T1 < T2, 在D2上T1 > T2.
要解决这种冲突似乎需要大量的通信，但是如果通信太多，延迟变大，执行效率就难以接受, 并且复杂的协议故障恢复也很困难。
现在我们知道commit ordering和two phrase commit结合起来可以解决这个问题。但是在了解这个解决方案之前，先要明白两个问题：
1. 强制global serializability的意义是什么？
2. 什么情况下分布式事务在不同的数据库里会出现相互矛盾的排序?
首先回答第一个问题，强制global serializability的目的当然是为了便于推理程序的逻辑。如果没有global serializability，会出现一些
不符合思维习惯的现象。 比如下面有两个例子：
1. T1：D1.c1++, D2.c2++, T2: D1.c1++, D2.c2++, 如果初始时D1.c1 == D2.c2, 那么我们希望T1,T2执行结束时看到的D1.c1和D2.c2始终相等，
   但是如果不能保证全局序，那么T1和T2有可能看到不一样的D1.c1和D2.c2；
2. T1: D1.c1 = D2.c2+1, T2: D2.c2 = D1.c1+1, 如果初始时D1.c1 == D2.c2相等，那么我们希望T1，T2执行结束时D1.c1 != D2.c2, 但是
   如果不能保证全局序，那么有可能T1和T2结束时看到的D1.c1 == D2.c2
然后看看第二个问题，为什么不加控制时，分布式事务在不同的数据库中会出现相互矛盾的排序? 实际上上面的两个例子已经说明了问题，
根本原因是分布式事务之间可能存在依赖关系，但是独立的数据库并不知道，所以独立的数据库做并发控制时便可以随意选择顺序, 
选择了相互矛盾的顺序也很正常。上面的两个例子都是这种情况。

* commit ordering
commit ordering和two phrase commit结合起来可以实现global serializability，具体来说：
atomic commitment protocol要保证所有参与的数据库对一个global transaction是要commit还是要abort达成一致，
two phrase commit的做法是引入一个coordinator。
在提交一个global transaction之前，需要所有参与的数据库投票决定该数据库是要commit还是要abort，
只有coordinator收到所有参与者的commit投票之后，该事务才可以提交。
这样任意一个global transaction的提交分为两个阶段, 投票阶段和执行阶段(commit或abort)。

数据库local commit ordering保证了任意两个事务T1，T2，如果T1有一个与T2冲突的操作，那么T1就需要在T2之前提交。
假如T1，T2是属于同一个global transaction，那么T1，T2不影响global CO，所以我们只考虑T1，T2属于两个不同的global transaction
的情况。

既然该数据库要求T1在T2之前提交，而two phrase commit要求一个事务在提交之前要先获得所有数据库的commit投票，
所以一个自然的想法是该数据库在T1提交之前，不能对T2投票赞成commit，只要满足这个限制，那么: 
T2的提交在T2的投票之后, T2的投票在T1提交之后，所以T2的提交必然在T1提交之后。
上面这个对本地数据库的投票的限制被称为vote ordering strategy。

如果所有参与的数据库都执行vote ordering strategy, 那么任意分布式事务在所有数据库上的冲突解决顺序就都是一致的，
并且与所属的分布式事务的提交顺序一致，即满足global CO。
当然这里用到了一个结论: 任意两个分布式事务如果相冲突，那么它们必然在某个参与的数据库上相互冲突，反之亦然。
那么可不可能，分布式事务之间实际上有逻辑的依赖，但是这种依赖最终没有体现在参与的数据库上呢？
比如一个分布式事务T1从数据库D1读X, 根据X的值写数据库D2的Y。这种跨数据库的依赖不可能被任何一个本地的数据库得知。
确实，这种依赖并不会被数据库知道 ，但是要明白这种依赖是程序逻辑来处理的，数据库并不需要知道这种依赖。
实际上冲突检测和数据分布在一个数据库还是多个数据库没有关系，因为只有操作同样的数据，才有可能构成冲突，
既然是同样的数据，必然要落在同一个数据库，从而必然会被检测到。
