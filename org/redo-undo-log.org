#+Title: redo/undo log

undo log用来保证事务的原子性，只要涉及到多处修改，不管是磁盘上的数据，还是内存中的数据，
都需要记录undo log,除非使用支持多版本的数据结构。
需要注意的是，当数据库支持的特性变多时，很难用单个支持多版本的数据结构来实现，即使只考虑内存数据也是如此，
比如COW Btree可以实现原子性提交事务，但是至少有如下的问题:
1. 拷贝代价较大
2. COW也处理不了多线程修改的问题
3. 以Btree为例，所有的数据都需要用一个Btree表示，当涉及到多个数据结构时(比如一个Btree，一个Hash)，几乎不可能使用COW技术(原则上可以，但是不容易编码)。
undo log在修改每一项数据之前记录。

因为修改数据可能需要多次随机IO，redo log用来延后对磁盘的随机IO，将修改操作顺序写到磁盘上。
如果使用redo log, 那么在用redo log记录修改操作的同时，还需要记录对应的undo log, undo log必须先于redo log被记录。

在实际中，为了减少磁盘随机写，undo log/redo log都是记录在一起的，如果有多个并发事务同时做，
它们的undo log/redo log会混合在一块, 所以每条log都要带上transaction ID。

如果一个事务决定提交，就记一条commited log, 如果决定回滚，就记一条abort log.

当系统宕机之后恢复的过程有两种策略:
1. 只重做已提交的事务
2. 重做所有已提交/未提交/回滚的事务, 但同时要做所有的undo log.
InnoDB采用第二种方案。

