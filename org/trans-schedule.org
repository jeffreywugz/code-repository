#+Title: Transaction Schedule
在数据库领域，schedule是指一段时间内开始和结束的事务所执行的操作的时间顺序。
有两种描述方法, 首先是用表格描述, T1，T2表示两个事务，列描述的是时间的先后顺序。
#+begin_example
   T1    T2
--------------
  R(X)
        R(Y)
  W(X)
        W(Y)
  Com.  Com.
#+end_example
另一种方法是用文本描述， 上面的表格等价与: R1(X)R2(Y)W1(X)W2(Y)COM1COM2

当然并非任意的两个时间都有先后顺序，所以要完整的描述schedule，必须用有向无环图。
但是讨论大部分问题使用上面的描述方法就足够了。
可以从两个方向对schedule分类:
* serializability
特别要区分以下几种schedule:
1. serial: 事务实际是串行执行的。
2. view-serializable: 事务实际上可能是并发执行的，但从效果上看起来是可串行的。
3. Conflict-serializable: 事务实际上可以并发执行，但是所有conflict必须按照某种serial schedule的方式被排序。
   这里conflict定义是: 任意两个操作(读或写)，如果至少有一个操作是写，并且它们操作同一个数据对象，那么这两个操作就conflict。
   所有conflict要按照某种serial schedule的方式被排序，这意味着能找到一个串行执行这些事务的schedule，并且
   任意两个conflict操作的发生的相对顺序与这种串行schedule的相对顺序一致。
4. commitment-ordered: 也被简称为CO。 CO首先必须满足conflict-serializable的条件，并且进一步要求conflict-serializable对应的
   串行化执行顺序就是CO schedule时事务的提交顺序。
   
从定义上看conflict-serializable必然是view-serializable的，因为只要conflict的操作顺序等价，那么从效果上是无法区分两种schedule的。
但是如果只是要求看起来可串行化，那么不必要求所有的conflict的操作顺序都等价，因为有些操作对外是没有效果的。
比如一连串无条件的写操作，W1(x)W2(x)W3(x), 写本身不依赖于任何操作，如果没有其他事务要读x, 那么只要最后执行的操作是W3(x),
那么从效果上无法区分W1(x)W2(x)和W2(x)W1(x), 所以如果遇到这样的操作序列，view-serializable与conflict-serializable相比
便有更大的调度自由。

* recoverability 
从unrecoverable到serial
1. unrecoverable: 如果随意进行schedule，有可能将数据库置于一个错误的状态，这种schedule是unrecoverable的，也是不可接受的。
   比如： W1(X)R2(X)Com2Abort1, 这个schedule涉及到两个事务，第二个事务读到了第一个事务写入的值，并且提交了，但是在这之后
   第一个事务却回滚了，这时数据库状态便是不一致的。
2. recoverable: 如果一个事务T1依赖于另一个事务T2, 那么只要T2回滚了，T1一定要回滚，满足这个条件的schedule就是recoverable。
3. cascadeless：也叫avoids casading aborts, 如果一个schedule可以避免一个事务的回滚导致相关的事务也回滚，但是依然recoverable，那么这个schedule就是cascadeless。
4. strict: 这种schedule要保证:如果一个事务T1有写操作与事务T2的一个操作冲突，并且T1的写操作先发生，那么T1就先提交。
按照定义，strict的schedule是casadeless的， casadeless的schedule是recoverable的, 最后serial的schedule一定是strict的。

综合起来, 从serializability and recoverability两个维度看schedule的包含关系是:
1. Serial < commitment-ordered < conflict-serializable < view-serializable <  all schedules
2. Serial < strict < avoids cascading aborts < recoverable < all schedules

一般说来，数据库系统感兴趣的schedule要满足conflict-serializable和recoverable(一般是strict)的性质。

* commit ordering和strict之间的区别:
CO要求如果T1在T2之前提交，那么T1的所有与T2冲突的操作都在T2对应的操作之前完成。
strict要求如果T1有一个写操作与T2冲突，那么只有在T1提交之后，T2对应的操作才能开始。
显然CO并不一定是strict的，因为他只要求T1与T2冲突的操作至今的顺序与提交顺序一致，T1完全可以在两个事务都执行完毕后在提交，
这与strict的要求是相违背的。

另一方面, 如果schedule满足strict性质，那么它一定是commit ordering的吗？直观上看来这似乎是正确的。
但事实并非如此，容易举出反例， 因为strict性质并不关心哪些T1的读在T2的写之前的事务之间的关系，这时T2可以在T1之前提交，
但这就不满足CO了。实际上不仅是CO，strict性质也保证不了conflict serializable。
比如：T1先读c，T2再写c, T2再读d，T2提交，T1再写d，T2提交，这个schedule满足strict性质，但不满足conflict serializable。

